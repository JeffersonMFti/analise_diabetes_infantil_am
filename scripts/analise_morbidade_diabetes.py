"""
An√°lise de Morbidade por Diabetes em Crian√ßas/Adolescentes - Amazonas (2020-2025)

Este script baixa dados do SIH-SUS (DATASUS), filtra casos de diabetes mellitus tipo 1 e 2
em crian√ßas/adolescentes de 0-14 anos no Amazonas e gera an√°lises detalhadas por ano.

Autor: GitHub Copilot
Data: 2025
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime
import warnings
import requests
import io

# Suprimir warnings desnecess√°rios
warnings.filterwarnings('ignore')

# Tentar importar pydatasus, com fallback se n√£o estiver dispon√≠vel
try:
    from pydatasus import download
    PYDATASUS_AVAILABLE = True
    print("‚úÖ Biblioteca pydatasus importada com sucesso")
except ImportError as e:
    print(f"AVISO: pydatasus nao esta disponivel ({e})")
    print("   Usando metodo alternativo para demonstracao...")
    PYDATASUS_AVAILABLE = False

def download_datasus_sih_data(start_year=2020, end_year=2025, state='AM'):
    """
    Baixa dados do SIH-SUS (Sistema de Informa√ß√µes Hospitalares) do DATASUS
    
    Args:
        start_year (int): Ano inicial
        end_year (int): Ano final
        state (str): Sigla do estado (AM = Amazonas)
    
    Returns:
        pd.DataFrame: DataFrame concatenado com todos os anos
    """
    print(f"üì• Iniciando download dos dados SIH-SUS para {state} ({start_year}-{end_year})")
    
    if not PYDATASUS_AVAILABLE:
        print("‚ö†Ô∏è pydatasus n√£o dispon√≠vel - criando dados de exemplo para demonstra√ß√£o")
        return create_sample_sih_data(start_year, end_year)
    
    all_data = []
    
    for year in range(start_year, end_year + 1):
        try:
            print(f"   Baixando dados de interna√ß√µes de {year}...")
            
            # Download dos dados SIH para o ano espec√≠fico
            # SIH-RD cont√©m dados de interna√ß√µes
            data = download.SIH_RD(state, year, month=None)  # Todos os meses do ano
            
            if data is not None and not data.empty:
                # Adicionar coluna do ano para controle
                data['ANO'] = year
                all_data.append(data)
                print(f"   ‚úÖ {year}: {len(data)} registros de interna√ß√µes baixados")
            else:
                print(f"   ‚ö†Ô∏è {year}: Nenhum dado de interna√ß√£o dispon√≠vel")
                
        except Exception as e:
            print(f"   ‚ùå Erro ao baixar dados de {year}: {str(e)}")
            continue
    
    if all_data:
        # Concatenar todos os DataFrames
        df_complete = pd.concat(all_data, ignore_index=True)
        print(f"‚úÖ Download de interna√ß√µes conclu√≠do! Total: {len(df_complete)} registros")
        return df_complete
    else:
        print("‚ùå Nenhum dado de interna√ß√£o foi baixado com sucesso!")
        print("üìù Criando dados de exemplo para demonstra√ß√£o...")
        return create_sample_sih_data(start_year, end_year)

def create_sample_sih_data(start_year=2020, end_year=2025):
    """
    Cria dados de exemplo de interna√ß√µes por diabetes para demonstra√ß√£o
    
    Args:
        start_year (int): Ano inicial
        end_year (int): Ano final
    
    Returns:
        pd.DataFrame: DataFrame com dados de exemplo de interna√ß√µes
    """
    print("üîÑ Gerando dados de exemplo de interna√ß√µes para demonstra√ß√£o...")
    
    # Simular casos de interna√ß√£o por diabetes infantil
    np.random.seed(42)  # Para reprodutibilidade
    
    sample_data = []
    
    for year in range(start_year, end_year + 1):
        # Simular entre 50-150 interna√ß√µes por ano (mais realista para diabetes infantil)
        n_cases = np.random.randint(50, 151)
        
        for i in range(n_cases):
            # Gerar dados fict√≠cios mas realistas
            age_years = np.random.randint(0, 15)  # 0 a 14 anos
            sex = np.random.choice(['1', '2'])  # 1=Masculino, 2=Feminino
            
            # C√≥digos de diabetes tipo 1 (E10) e tipo 2 (E11) - foco na solicita√ß√£o
            diabetes_codes = ['E10', 'E11']  # Apenas tipo 1 e 2
            weights = [0.8, 0.2]  # 80% tipo 1, 20% tipo 2 (mais comum em crian√ßas)
            
            main_code = np.random.choice(diabetes_codes, p=weights)
            secondary_code = str(np.random.randint(0, 9))
            diag_princ = main_code + secondary_code
            
            # Data fict√≠cia da interna√ß√£o
            month = np.random.randint(1, 13)
            day = np.random.randint(1, 29)
            dt_inter = f"{day:02d}{month:02d}{year}"
            dt_saida = f"{day:02d}{month:02d}{year}"  # Mesmo dia para simplificar
            
            # Munic√≠pio fict√≠cio (c√≥digos do AM)
            municipios_am = ['230440', '230020', '230030', '230100', '230200']
            munres = np.random.choice(municipios_am)
            
            # Tempo de perman√™ncia (dias)
            dias_perm = np.random.randint(1, 15)  # 1 a 14 dias
            
            # Valor da interna√ß√£o (fict√≠cio)
            val_tot = np.random.uniform(500, 3000)  # R$ 500 a R$ 3000
            
            sample_data.append({
                'DT_INTER': dt_inter,
                'DT_SAIDA': dt_saida,
                'IDADE': age_years,
                'SEXO': sex,
                'DIAG_PRINC': diag_princ,  # Diagn√≥stico principal
                'MUNRES': munres,
                'DIAS_PERM': dias_perm,
                'VAL_TOT': val_tot,
                'ANO': year
            })
    
    df_sample = pd.DataFrame(sample_data)
    print(f"‚úÖ Dados de exemplo de interna√ß√µes criados: {len(df_sample)} registros")
    print("üìù IMPORTANTE: Estes s√£o dados fict√≠cios para demonstra√ß√£o!")
    
    return df_sample

def filter_diabetes_children_sih(df):
    """
    Filtra os dados de interna√ß√£o para casos de diabetes tipo 1 e 2 em crian√ßas (0-14 anos)
    
    Args:
        df (pd.DataFrame): DataFrame com dados brutos do SIH-SUS
    
    Returns:
        pd.DataFrame: DataFrame filtrado
    """
    print("üîç Aplicando filtros nos dados de interna√ß√£o...")
    
    # Verificar se o DataFrame n√£o est√° vazio
    if df.empty:
        print("‚ùå DataFrame vazio - n√£o √© poss√≠vel aplicar filtros")
        return pd.DataFrame()
    
    print(f"   Registros originais: {len(df)}")
    
    # 1. Filtrar por idade: crian√ßas/adolescentes de 0 a 14 anos
    if 'IDADE' in df.columns:
        # Converter IDADE para num√©rico
        df['IDADE_NUMERICA'] = pd.to_numeric(df['IDADE'], errors='coerce')
        
        # Filtrar crian√ßas at√© 14 anos
        df_filtered = df[
            (df['IDADE_NUMERICA'] <= 14) & 
            (df['IDADE_NUMERICA'] >= 0)
        ].copy()
        
        print(f"   Ap√≥s filtro de idade (0-14 anos): {len(df_filtered)}")
    else:
        print("   ‚ö†Ô∏è Coluna IDADE n√£o encontrada")
        df_filtered = df.copy()
    
    # 2. Filtrar por diagn√≥stico principal: c√≥digos E10 (Tipo 1) e E11 (Tipo 2)
    if 'DIAG_PRINC' in df_filtered.columns:
        # Filtrar apenas diabetes tipo 1 (E10) e tipo 2 (E11)
        diabetes_filter = df_filtered['DIAG_PRINC'].str.startswith(('E10', 'E11'), na=False)
        df_filtered = df_filtered[diabetes_filter].copy()
        print(f"   Ap√≥s filtro de diabetes tipo 1 e 2 (E10, E11): {len(df_filtered)}")
        
        # Classificar tipo de diabetes
        df_filtered['TIPO_DIABETES'] = df_filtered['DIAG_PRINC'].str[:3].map({
            'E10': 'Tipo 1',
            'E11': 'Tipo 2'
        })
        
    else:
        print("   ‚ö†Ô∏è Coluna DIAG_PRINC n√£o encontrada")
    
    # 3. Selecionar colunas relevantes
    relevant_columns = ['DT_INTER', 'DT_SAIDA', 'IDADE', 'SEXO', 'DIAG_PRINC', 
                       'TIPO_DIABETES', 'MUNRES', 'DIAS_PERM', 'VAL_TOT', 'ANO']
    available_columns = [col for col in relevant_columns if col in df_filtered.columns]
    
    if available_columns:
        df_filtered = df_filtered[available_columns].copy()
        print(f"   Colunas selecionadas: {available_columns}")
    
    print(f"‚úÖ Filtros aplicados! Registros finais: {len(df_filtered)}")
    return df_filtered

def create_detailed_yearly_analysis(df):
    """
    Cria an√°lise detalhada por ano com m√©dias e estat√≠sticas
    
    Args:
        df (pd.DataFrame): DataFrame com dados processados
    
    Returns:
        dict: Dicion√°rio com an√°lises detalhadas
    """
    print("üìä Gerando an√°lise detalhada por ano...")
    
    if df.empty:
        return {
            'total_casos': 0,
            'analise_anual': pd.DataFrame(),
            'casos_por_tipo': pd.DataFrame(),
            'casos_por_sexo_ano': pd.DataFrame(),
            'media_dias_internacao': pd.DataFrame(),
            'media_valor_internacao': pd.DataFrame()
        }
    
    # An√°lise geral por ano
    analise_anual = df.groupby('ANO').agg({
        'IDADE': ['count', 'mean', 'median'],
        'DIAS_PERM': ['mean', 'median', 'sum'],
        'VAL_TOT': ['mean', 'median', 'sum']
    }).round(2)
    
    # Achatar os nomes das colunas
    analise_anual.columns = [f'{col[0]}_{col[1]}' for col in analise_anual.columns]
    analise_anual = analise_anual.reset_index()
    
    # Renomear colunas para ficar mais claro
    analise_anual.rename(columns={
        'IDADE_count': 'Total_Casos',
        'IDADE_mean': 'Idade_Media',
        'IDADE_median': 'Idade_Mediana',
        'DIAS_PERM_mean': 'Dias_Internacao_Media',
        'DIAS_PERM_median': 'Dias_Internacao_Mediana',
        'DIAS_PERM_sum': 'Total_Dias_Internacao',
        'VAL_TOT_mean': 'Valor_Medio_Internacao',
        'VAL_TOT_median': 'Valor_Mediano_Internacao',
        'VAL_TOT_sum': 'Valor_Total_Internacoes'
    }, inplace=True)
    
    # Casos por tipo de diabetes e ano
    casos_por_tipo = df.groupby(['ANO', 'TIPO_DIABETES']).size().reset_index(name='Numero_Casos')
    casos_por_tipo_pivot = casos_por_tipo.pivot(index='ANO', columns='TIPO_DIABETES', values='Numero_Casos').fillna(0)
    casos_por_tipo_pivot = casos_por_tipo_pivot.reset_index()
    
    # Casos por sexo e ano
    df['SEXO_DESC'] = df['SEXO'].map({'1': 'Masculino', '2': 'Feminino'})
    casos_por_sexo_ano = df.groupby(['ANO', 'SEXO_DESC']).size().reset_index(name='Numero_Casos')
    casos_por_sexo_pivot = casos_por_sexo_ano.pivot(index='ANO', columns='SEXO_DESC', values='Numero_Casos').fillna(0)
    casos_por_sexo_pivot = casos_por_sexo_pivot.reset_index()
    
    # M√©dia de dias de interna√ß√£o por ano
    media_dias = df.groupby('ANO')['DIAS_PERM'].agg(['mean', 'median', 'std']).round(2).reset_index()
    media_dias.columns = ['ANO', 'Media_Dias', 'Mediana_Dias', 'Desvio_Padrao_Dias']
    
    # M√©dia de valor de interna√ß√£o por ano
    media_valor = df.groupby('ANO')['VAL_TOT'].agg(['mean', 'median', 'std']).round(2).reset_index()
    media_valor.columns = ['ANO', 'Media_Valor', 'Mediana_Valor', 'Desvio_Padrao_Valor']
    
    total_casos = len(df)
    
    stats = {
        'total_casos': total_casos,
        'analise_anual': analise_anual,
        'casos_por_tipo': casos_por_tipo_pivot,
        'casos_por_sexo_ano': casos_por_sexo_pivot,
        'media_dias_internacao': media_dias,
        'media_valor_internacao': media_valor
    }
    
    print(f"   Total de casos: {total_casos}")
    print(f"   ‚úÖ An√°lise detalhada por ano gerada!")
    
    # Imprimir resumo por ano
    print(f"\nüìà Resumo por ano:")
    for _, row in analise_anual.iterrows():
        print(f"   {int(row['ANO'])}: {int(row['Total_Casos'])} casos, "
              f"idade m√©dia {row['Idade_Media']:.1f} anos, "
              f"{row['Dias_Internacao_Media']:.1f} dias/interna√ß√£o")
    
    return stats

def export_detailed_analysis_to_excel(df, stats, filename='diabetes_morbidade_criancas_am_2020_2025.xlsx'):
    """
    Exporta dados e an√°lises detalhadas para arquivo Excel
    
    Args:
        df (pd.DataFrame): DataFrame com dados processados
        stats (dict): Dicion√°rio com estat√≠sticas
        filename (str): Nome do arquivo de sa√≠da
    """
    print(f"üìÅ Exportando an√°lise detalhada para {filename}...")
    
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        # Aba 1: Dados brutos
        if not df.empty:
            df.to_excel(writer, sheet_name='Dados_Internacoes', index=False)
            print(f"   ‚úÖ Aba 'Dados_Internacoes' criada com {len(df)} registros")
        
        # Aba 2: An√°lise anual completa
        if not stats['analise_anual'].empty:
            stats['analise_anual'].to_excel(writer, sheet_name='Analise_Anual', index=False)
            print(f"   ‚úÖ Aba 'Analise_Anual' criada")
        
        # Aba 3: Casos por tipo de diabetes
        if not stats['casos_por_tipo'].empty:
            stats['casos_por_tipo'].to_excel(writer, sheet_name='Casos_Por_Tipo', index=False)
            print(f"   ‚úÖ Aba 'Casos_Por_Tipo' criada")
        
        # Aba 4: Casos por sexo
        if not stats['casos_por_sexo_ano'].empty:
            stats['casos_por_sexo_ano'].to_excel(writer, sheet_name='Casos_Por_Sexo', index=False)
            print(f"   ‚úÖ Aba 'Casos_Por_Sexo' criada")
        
        # Aba 5: M√©dias de dias de interna√ß√£o
        if not stats['media_dias_internacao'].empty:
            stats['media_dias_internacao'].to_excel(writer, sheet_name='Media_Dias_Internacao', index=False)
            print(f"   ‚úÖ Aba 'Media_Dias_Internacao' criada")
        
        # Aba 6: M√©dias de valor das interna√ß√µes
        if not stats['media_valor_internacao'].empty:
            stats['media_valor_internacao'].to_excel(writer, sheet_name='Media_Valor_Internacao', index=False)
            print(f"   ‚úÖ Aba 'Media_Valor_Internacao' criada")
        
        # Aba 7: Resumo executivo
        startrow = 0
        
        # Informa√ß√µes gerais
        resumo_geral = pd.DataFrame({
            'Indicador': [
                'Total de Interna√ß√µes',
                'Per√≠odo Analisado',
                'Estado',
                'Faixa Et√°ria',
                'Tipos de Diabetes',
                'Fonte dos Dados'
            ],
            'Valor': [
                stats['total_casos'],
                '2020-2025',
                'Amazonas (AM)',
                '0 a 14 anos',
                'Tipo 1 (E10) e Tipo 2 (E11)',
                'SIH-SUS / DATASUS'
            ]
        })
        resumo_geral.to_excel(writer, sheet_name='Resumo_Executivo', startrow=startrow, index=False)
        
        print(f"   ‚úÖ Aba 'Resumo_Executivo' criada")
    
    print(f"‚úÖ Arquivo {filename} criado com sucesso!")

def main():
    """
    Fun√ß√£o principal que orquestra todo o processo de an√°lise de morbidade
    """
    print("üöÄ Iniciando an√°lise de MORBIDADE por diabetes - Crian√ßas/Adolescentes Amazonas")
    print("üìä Foco: Diabetes Tipo 1 e 2 | Idade: 0-14 anos | Per√≠odo: 2020-2025")
    print("=" * 80)
    
    if not PYDATASUS_AVAILABLE:
        print("üìù AVISO: Executando em modo de demonstra√ß√£o com dados fict√≠cios")
        print("   Para usar dados reais, instale pydatasus: pip install pydatasus")
        print("=" * 80)
    
    try:
        # 1. Download dos dados SIH-SUS (interna√ß√µes)
        df_raw = download_datasus_sih_data(start_year=2020, end_year=2025, state='AM')
        
        if df_raw.empty:
            print("‚ùå N√£o foi poss√≠vel obter dados de interna√ß√£o. Encerrando execu√ß√£o.")
            return
        
        # 2. Aplicar filtros espec√≠ficos
        df_filtered = filter_diabetes_children_sih(df_raw)
        
        if df_filtered.empty:
            print("‚ùå Nenhum caso de diabetes tipo 1/2 infantil encontrado nos dados.")
            # Criar estrutura vazia
            df_filtered = pd.DataFrame(columns=[
                'DT_INTER', 'DT_SAIDA', 'IDADE', 'SEXO', 'DIAG_PRINC', 
                'TIPO_DIABETES', 'MUNRES', 'DIAS_PERM', 'VAL_TOT', 'ANO'
            ])
        
        # 3. Gerar an√°lise detalhada por ano
        stats = create_detailed_yearly_analysis(df_filtered)
        
        # 4. Exportar para Excel com m√∫ltiplas abas
        export_detailed_analysis_to_excel(df_filtered, stats)
        
        print("=" * 80)
        print("‚úÖ An√°lise de MORBIDADE conclu√≠da com sucesso!")
        print(f"üìä Resumo final:")
        print(f"   - Total de interna√ß√µes: {stats['total_casos']}")
        print(f"   - Arquivo gerado: diabetes_morbidade_criancas_am_2020_2025.xlsx")
        print(f"   - Abas criadas: 7 (dados + 6 an√°lises)")
        print(f"   - Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        
        if not PYDATASUS_AVAILABLE:
            print(f"   üìù IMPORTANTE: Dados fict√≠cios foram usados para demonstra√ß√£o!")
        
        print("=" * 80)
        print("üìã Abas do Excel criadas:")
        print("   1. Dados_Internacoes - Dados brutos filtrados")
        print("   2. Analise_Anual - M√©dias e totais por ano")
        print("   3. Casos_Por_Tipo - Distribui√ß√£o Tipo 1 vs Tipo 2")
        print("   4. Casos_Por_Sexo - Distribui√ß√£o por sexo e ano")
        print("   5. Media_Dias_Internacao - Tempo m√©dio de interna√ß√£o")
        print("   6. Media_Valor_Internacao - Custo m√©dio das interna√ß√µes")
        print("   7. Resumo_Executivo - Informa√ß√µes gerais")
        
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {str(e)}")
        print("Verifique se todas as depend√™ncias est√£o instaladas:")
        print("pip install -r requirements.txt")

if __name__ == "__main__":
    main()